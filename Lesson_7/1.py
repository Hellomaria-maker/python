# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
#
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
#
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов
# класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
#
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки
# первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, my_list):
        print(f'Созданана новая матрица')
        self.my_mat = my_list

    def __str__(self):
        return str('\n'.join(['\t'.join([str(j) for j in i]) for i in self.my_mat]))

    def __add__(self, other):
        if isinstance(other, list):         #проверяем тип пагрумента
            result_mat = []
            for item in zip(self.my_mat, other):
                result_mat.append([sum([j, k]) for j, k in zip(*item)])
            print('Сумма матриц:')
            return str('\n'.join(['\t'.join([str(j) for j in i]) for i in result_mat]))
        else:
            return "Ошибка!"

a = Matrix([[1, 2, 3, 4],
           [4, 3, 2, 1],
           [0, 0, 0, 0]])
print(a)
b = Matrix([[1, 2, 3, 4],
           [4, 3, 2, 1],
           [1, 2, 3, 4]])

print(a.__add__(b.my_mat))

print(a.__add__(23))
